`include "pu.vh"
module imem( // Instruction Memory
	input [`PCS:0] pc,
	output logic [`CMDS:0] o);
	always_comb
		case(pc)
		// synopsys full_case parallel_case
		5'h00: o = 16'b0000_0000_0000_0000; // NOP check
		5'h01: o = 16'b0100_0000_0101_0110; // LIL r0, 01010110
		5'h02: o = 16'b0101_0000_1010_1001; // LIH r0, 10101001 A956
		5'h03: o = 16'b0100_0101_1010_1001; // LIL r1, 10101001
		5'h04: o = 16'b0101_0101_0101_0110; // LIH r1, 01010110 56A9
// get r0 <- r0 or r1 and make all 1 to r0
		5'h05: o = 16'b0010_1000_1010_0000; // NAD r0=r0,r0 ->56A9
		5'h06: o = 16'b0010_1001_1010_0101; // NAD r1=r1,r1 ->A956
		5'h07: o = 16'b0010_1000_1010_0001; // NAD r0=r0,r1 ->FFFF
// make another all 1 to r1
		7'h08: o = 16'b0000_0101_1111_1111; // LI  r1, 11111111 ->FFFF
		5'h09: o = 16'b0000_0110_0000_0111; // LI  r2, 7 ->0007
		5'h0a: o = 16'b0010_1001_0100_0110; // RSL r1=r1,r2 ->FF80
		5'h0b: o = 16'b1100_0101_0111_1111; // ADD r1=r1,01111111 ->FFFF
// compare check with all 1s
		5'h0c: o = 16'b0000_0001_0001_0001; // CMP r0,r1
		5'h0d: o = 16'b0010_0100_0000_0010; // BR PZ [PC+2]
		5'h0e: o = 16'b0000_0000_0000_0001; // HALT
// parity check with all 1s
		5'h0f: o = 16'b0010_1001_1111_0001; // MV r1, r1
		5'h10: o = 16'b0010_0111_0000_0010; // BR PS [PC+2]
		5'h11: o = 16'b0000_0000_0000_0001; // HALT
		5'h12: o = 16'b1100_0100_0000_0001; // ADD r1=r0,1
		5'h13: o = 16'b0010_0110_0000_0010; // BR PC [PC+2]
		5'h14: o = 16'b0000_0000_0000_0001; // HALT
		5'h15: o = 16'b0010_1010_1111_0010; // MV r2, r2
		5'h16: o = 16'b0010_0000_0000_0010; // BR NZ [PC+2]
		5'h17: o = 16'b0000_0000_0000_0001; // HALT
// make another all 1 to r1
		5'h18: o = 16'b1100_0100_0001_0001; // SUB r1=r0,1
		5'h19: o = 16'b0010_0110_0000_0010; // BR PC [PC+2]
		5'h1a: o = 16'b0000_0000_0000_0001; // HALT
		5'h1b: o = 16'b0000_1000_0000_0001; // SM [1]=r0
		5'h1c: o = 16'b1000_0011_0000_0001; // LM r3=[1]
		5'h1d: o = 16'b0000_0000_0000_0001; // HALT
		5'h1e: o = 16'b0000_0000_0000_0000; // NOP
		endcase
endmodule
