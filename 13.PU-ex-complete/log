yosys pu.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os)


-- Executing script file `pu.ys' --

1. Executing Verilog-2005 frontend: alu.sv
Parsing SystemVerilog input from `alu.sv' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) full_case' comments.
Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!
Warning: Found one of those horrible `(synopsys|synthesis) parallel_case' comments.
Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: imem.sv
Parsing SystemVerilog input from `imem.sv' to AST representation.
Generating RTLIL representation for module `\imem'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: pc.sv
Parsing SystemVerilog input from `pc.sv' to AST representation.
Generating RTLIL representation for module `\pc'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ra.sv
Parsing SystemVerilog input from `ra.sv' to AST representation.
Generating RTLIL representation for module `\ra'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: dec.sv
Parsing SystemVerilog input from `dec.sv' to AST representation.
Generating RTLIL representation for module `\dec'.
dec.sv:158: Warning: System task `$display' outside initial block is unsupported.
dec.sv:159: Warning: System task `$display' outside initial block is unsupported.
dec.sv:169: Warning: System task `$display' outside initial block is unsupported.
dec.sv:177: Warning: System task `$display' outside initial block is unsupported.
dec.sv:205: Warning: System task `$display' outside initial block is unsupported.
dec.sv:216: Warning: System task `$display' outside initial block is unsupported.
dec.sv:227: Warning: System task `$display' outside initial block is unsupported.
dec.sv:240: Warning: System task `$display' outside initial block is unsupported.
dec.sv:252: Warning: System task `$display' outside initial block is unsupported.
dec.sv:253: Warning: System task `$display' outside initial block is unsupported.
dec.sv:267: Warning: System task `$display' outside initial block is unsupported.
dec.sv:280: Warning: System task `$display' outside initial block is unsupported.
dec.sv:292: Warning: System task `$display' outside initial block is unsupported.
dec.sv:293: Warning: System task `$display' outside initial block is unsupported.
dec.sv:305: Warning: System task `$display' outside initial block is unsupported.
dec.sv:306: Warning: System task `$display' outside initial block is unsupported.
dec.sv:317: Warning: System task `$display' outside initial block is unsupported.
dec.sv:329: Warning: System task `$display' outside initial block is unsupported.
dec.sv:341: Warning: System task `$display' outside initial block is unsupported.
dec.sv:354: Warning: System task `$display' outside initial block is unsupported.
dec.sv:368: Warning: System task `$display' outside initial block is unsupported.
dec.sv:369: Warning: System task `$display' outside initial block is unsupported.
dec.sv:384: Warning: System task `$display' outside initial block is unsupported.
dec.sv:397: Warning: System task `$display' outside initial block is unsupported.
dec.sv:411: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: imx.sv
Parsing SystemVerilog input from `imx.sv' to AST representation.
Generating RTLIL representation for module `\imx'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: dmem.sv
Parsing SystemVerilog input from `dmem.sv' to AST representation.
Generating RTLIL representation for module `\dmem'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: sel.sv
Parsing SystemVerilog input from `sel.sv' to AST representation.
Generating RTLIL representation for module `\sel'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: pu.sv
Parsing SystemVerilog input from `pu.sv' to AST representation.
Generating RTLIL representation for module `\pu'.
pu.sv:14: Warning: Identifier `\pcs' is implicitly declared.
pu.sv:16: Warning: Identifier `\dstb' is implicitly declared.
pu.sv:16: Warning: Identifier `\ze' is implicitly declared.
pu.sv:16: Warning: Identifier `\ca' is implicitly declared.
pu.sv:16: Warning: Identifier `\sg' is implicitly declared.
pu.sv:17: Warning: Identifier `\h' is implicitly declared.
pu.sv:17: Warning: Identifier `\pcwe' is implicitly declared.
pu.sv:20: Warning: Identifier `\dmwe' is implicitly declared.
pu.sv:20: Warning: Identifier `\dms' is implicitly declared.
Successfully finished Verilog frontend.

10. Executing PROC pass (convert processes to netlists).

10.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$sel.sv:6$56 in module sel.
Removed 1 dead cases from process $proc$imx.sv:7$48 in module imx.
Removed 1 dead cases from process $proc$dec.sv:143$43 in module dec.
Marked 4 switch rules as full_case in process $proc$dec.sv:143$43 in module dec.
Removed 1 dead cases from process $proc$dec.sv:125$36 in module dec.
Marked 2 switch rules as full_case in process $proc$pc.sv:8$24 in module pc.
Marked 4 switch rules as full_case in process $proc$alu.sv:33$19 in module alu.
Removed 1 dead cases from process $proc$alu.sv:11$1 in module alu.
Removed a total of 4 dead cases.

10.3. Executing PROC_INIT pass (extract init attributes).

10.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\pc.$proc$pc.sv:8$24'.
Found async reset \rst in `\alu.$proc$alu.sv:33$19'.

10.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sel.$proc$sel.sv:6$56'.
     1/2: $1\o[15:0]
     2/2: $0\o[15:0]
Creating decoders for process `\dmem.$proc$dmem.sv:10$51'.
     1/3: $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54
     2/3: $0$memwr$\dm$dmem.sv:11$49_DATA[15:0]$52
     3/3: $0$memwr$\dm$dmem.sv:11$49_ADDR[7:0]$53
Creating decoders for process `\imx.$proc$imx.sv:7$48'.
     1/2: $1\o[15:0]
     2/2: $0\o[15:0]
Creating decoders for process `\dec.$proc$dec.sv:143$43'.
     1/43: $5\pcwe[0:0]
     2/43: $4\op[3:0]
     3/43: $4\liop[1:0]
     4/43: $4\iv[7:0]
     5/43: $3\ra[1:0]
     6/43: $4\pcwe[0:0]
     7/43: $3\op[3:0]
     8/43: $3\liop[1:0]
     9/43: $3\iv[7:0]
    10/43: $2\pcs[0:0]
    11/43: $3\pcwe[0:0]
    12/43: $2\liop[1:0]
    13/43: $2\iv[7:0]
    14/43: $2\pcwe[0:0]
    15/43: $2\rb[1:0]
    16/43: $2\op[3:0]
    17/43: $2\ra[1:0]
    18/43: $1\dstb[0:0]
    19/43: $1\iv[7:0]
    20/43: $1\pcs[0:0]
    21/43: $1\dms[0:0]
    22/43: $1\dmwe[0:0]
    23/43: $1\pcwe[0:0]
    24/43: $1\liop[1:0]
    25/43: $1\rb[1:0]
    26/43: $1\h[0:0]
    27/43: $1\wad[1:0]
    28/43: $1\ra[1:0]
    29/43: $1\we[0:0]
    30/43: $1\op[3:0]
    31/43: $0\iv[7:0]
    32/43: $0\pcs[0:0]
    33/43: $0\dms[0:0]
    34/43: $0\dmwe[0:0]
    35/43: $0\pcwe[0:0]
    36/43: $0\liop[1:0]
    37/43: $0\rb[1:0]
    38/43: $0\h[0:0]
    39/43: $0\wad[1:0]
    40/43: $0\ra[1:0]
    41/43: $0\we[0:0]
    42/43: $0\op[3:0]
    43/43: $0\dstb[0:0]
Creating decoders for process `\dec.$proc$dec.sv:125$36'.
     1/2: $1\pf[0:0]
     2/2: $0\pf[0:0]
Creating decoders for process `\ra.$proc$ra.sv:10$29'.
     1/3: $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30
     2/3: $0$memwr$\rega$ra.sv:11$28_DATA[15:0]$32
     3/3: $0$memwr$\rega$ra.sv:11$28_ADDR[1:0]$31
Creating decoders for process `\pc.$proc$pc.sv:8$24'.
     1/1: $0\pc[5:0]
Creating decoders for process `\imem.$proc$imem.sv:5$23'.
     1/2: $1\o[15:0]
     2/2: $0\o[15:0]
Creating decoders for process `\alu.$proc$alu.sv:33$19'.
     1/3: $0\sg[0:0]
     2/3: $0\ca[0:0]
     3/3: $0\ze[0:0]
Creating decoders for process `\alu.$proc$alu.sv:11$1'.
     1/2: $1\rr[16:0]
     2/2: $0\rr[16:0]

10.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\sel.\o' from process `\sel.$proc$sel.sv:6$56'.
No latch inferred for signal `\imx.\o' from process `\imx.$proc$imx.sv:7$48'.
No latch inferred for signal `\dec.\dstb' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\op' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\we' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\ra' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\wad' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\h' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\rb' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\liop' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\pcwe' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\dmwe' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\dms' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\pcs' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\iv' from process `\dec.$proc$dec.sv:143$43'.
No latch inferred for signal `\dec.\pf' from process `\dec.$proc$dec.sv:125$36'.
No latch inferred for signal `\imem.\o' from process `\imem.$proc$imem.sv:5$23'.
No latch inferred for signal `\alu.\rr' from process `\alu.$proc$alu.sv:11$1'.

10.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dmem.$memwr$\dm$dmem.sv:11$49_DATA' using process `\dmem.$proc$dmem.sv:10$51'.
  created $dff cell `$procdff$716' with positive edge clock.
Creating register for signal `\dmem.$memwr$\dm$dmem.sv:11$49_ADDR' using process `\dmem.$proc$dmem.sv:10$51'.
  created $dff cell `$procdff$717' with positive edge clock.
Creating register for signal `\dmem.$memwr$\dm$dmem.sv:11$49_EN' using process `\dmem.$proc$dmem.sv:10$51'.
  created $dff cell `$procdff$718' with positive edge clock.
Creating register for signal `\ra.$memwr$\rega$ra.sv:11$28_EN' using process `\ra.$proc$ra.sv:10$29'.
  created $dff cell `$procdff$719' with positive edge clock.
Creating register for signal `\ra.$memwr$\rega$ra.sv:11$28_ADDR' using process `\ra.$proc$ra.sv:10$29'.
  created $dff cell `$procdff$720' with positive edge clock.
Creating register for signal `\ra.$memwr$\rega$ra.sv:11$28_DATA' using process `\ra.$proc$ra.sv:10$29'.
  created $dff cell `$procdff$721' with positive edge clock.
Creating register for signal `\pc.\pc' using process `\pc.$proc$pc.sv:8$24'.
  created $adff cell `$procdff$722' with positive edge clock and positive level reset.
Creating register for signal `\alu.\ze' using process `\alu.$proc$alu.sv:33$19'.
  created $adff cell `$procdff$723' with positive edge clock and positive level reset.
Creating register for signal `\alu.\ca' using process `\alu.$proc$alu.sv:33$19'.
  created $adff cell `$procdff$724' with positive edge clock and positive level reset.
Creating register for signal `\alu.\sg' using process `\alu.$proc$alu.sv:33$19'.
  created $adff cell `$procdff$725' with positive edge clock and positive level reset.

10.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\sel.$proc$sel.sv:6$56'.
Removing empty process `sel.$proc$sel.sv:6$56'.
Found and cleaned up 1 empty switch in `\dmem.$proc$dmem.sv:10$51'.
Removing empty process `dmem.$proc$dmem.sv:10$51'.
Found and cleaned up 1 empty switch in `\imx.$proc$imx.sv:7$48'.
Removing empty process `imx.$proc$imx.sv:7$48'.
Found and cleaned up 5 empty switches in `\dec.$proc$dec.sv:143$43'.
Removing empty process `dec.$proc$dec.sv:143$43'.
Found and cleaned up 1 empty switch in `\dec.$proc$dec.sv:125$36'.
Removing empty process `dec.$proc$dec.sv:125$36'.
Found and cleaned up 1 empty switch in `\ra.$proc$ra.sv:10$29'.
Removing empty process `ra.$proc$ra.sv:10$29'.
Found and cleaned up 2 empty switches in `\pc.$proc$pc.sv:8$24'.
Removing empty process `pc.$proc$pc.sv:8$24'.
Found and cleaned up 1 empty switch in `\imem.$proc$imem.sv:5$23'.
Removing empty process `imem.$proc$imem.sv:5$23'.
Found and cleaned up 3 empty switches in `\alu.$proc$alu.sv:33$19'.
Removing empty process `alu.$proc$alu.sv:33$19'.
Found and cleaned up 1 empty switch in `\alu.$proc$alu.sv:11$1'.
Removing empty process `alu.$proc$alu.sv:11$1'.
Cleaned up 17 empty switches.

11. Executing HIERARCHY pass (managing design hierarchy).

11.1. Analyzing design hierarchy..
Top module:  \pu
Used module:     \sel
Used module:     \dmem
Used module:     \dec
Used module:     \imem
Used module:     \pc
Used module:     \alu
Used module:     \imx
Used module:     \ra

11.2. Analyzing design hierarchy..
Top module:  \pu
Used module:     \sel
Used module:     \dmem
Used module:     \dec
Used module:     \imem
Used module:     \pc
Used module:     \alu
Used module:     \imx
Used module:     \ra
Removed 0 unused modules.
Mapping positional arguments of cell pu.dsel (sel).
Mapping positional arguments of cell pu.dmem (dmem).
Mapping positional arguments of cell pu.dec (dec).
Mapping positional arguments of cell pu.imem (imem).
Mapping positional arguments of cell pu.pc (pc).
Mapping positional arguments of cell pu.alu (alu).
Mapping positional arguments of cell pu.imx (imx).
Mapping positional arguments of cell pu.asel (sel).
Mapping positional arguments of cell pu.ra (ra).

12. Executing SYNTH pass.

12.1. Executing HIERARCHY pass (managing design hierarchy).

12.1.1. Analyzing design hierarchy..
Top module:  \pu
Used module:     \sel
Used module:     \dmem
Used module:     \dec
Used module:     \imem
Used module:     \pc
Used module:     \alu
Used module:     \imx
Used module:     \ra

12.1.2. Analyzing design hierarchy..
Top module:  \pu
Used module:     \sel
Used module:     \dmem
Used module:     \dec
Used module:     \imem
Used module:     \pc
Used module:     \alu
Used module:     \imx
Used module:     \ra
Removed 0 unused modules.

12.2. Executing PROC pass (convert processes to netlists).

12.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

12.2.3. Executing PROC_INIT pass (extract init attributes).

12.2.4. Executing PROC_ARST pass (detect async resets in processes).

12.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

12.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

12.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

12.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module pu.
Optimizing module sel.
Optimizing module dmem.
Optimizing module imx.
<suppressed ~1 debug messages>
Optimizing module dec.
<suppressed ~18 debug messages>
Optimizing module ra.
Optimizing module pc.
<suppressed ~2 debug messages>
Optimizing module imem.
<suppressed ~1 debug messages>
Optimizing module alu.
<suppressed ~4 debug messages>

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \sel..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 121 unused wires.
<suppressed ~9 debug messages>

12.5. Executing CHECK pass (checking for obvious problems).
checking module alu..
checking module dec..
checking module dmem..
checking module imem..
checking module imx..
checking module pc..
checking module pu..
checking module ra..
checking module sel..
found and reported 0 problems.

12.6. Executing OPT pass (performing simple optimizations).

12.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\dec'.
<suppressed ~879 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 295 cells.

12.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$167.
    dead port 2/2 on $mux $procmux$184.
    dead port 2/2 on $mux $procmux$202.
    dead port 2/2 on $mux $procmux$220.
    dead port 2/2 on $mux $procmux$238.
    dead port 2/2 on $mux $procmux$116.
    dead port 2/2 on $mux $procmux$257.
    dead port 2/2 on $mux $procmux$276.
    dead port 2/2 on $mux $procmux$295.
    dead port 2/2 on $mux $procmux$314.
    dead port 2/2 on $mux $procmux$133.
    dead port 2/2 on $mux $procmux$150.
    dead port 2/2 on $mux $procmux$75.
    dead port 2/2 on $mux $procmux$81.
    dead port 2/2 on $mux $procmux$87.
    dead port 2/2 on $mux $procmux$93.
    dead port 2/2 on $mux $procmux$99.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 17 multiplexer ports.
<suppressed ~28 debug messages>

12.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
    New ctrl vector for $pmux cell $procmux$342: { $procmux$203_CMP $procmux$117_CMP $procmux$325_CMP $auto$opt_reduce.cc:132:opt_mux$729 $auto$opt_reduce.cc:132:opt_mux$727 $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$417: { $auto$opt_reduce.cc:132:opt_mux$733 $auto$opt_reduce.cc:132:opt_mux$731 }
    New ctrl vector for $pmux cell $procmux$542: { $auto$opt_reduce.cc:132:opt_mux$739 $auto$opt_reduce.cc:132:opt_mux$737 $auto$opt_reduce.cc:132:opt_mux$735 }
    New ctrl vector for $pmux cell $procmux$367: { $procmux$117_CMP $auto$opt_reduce.cc:132:opt_mux$741 }
    New ctrl vector for $pmux cell $procmux$317: { $procmux$340_CMP $procmux$328_CMP $procmux$324_CMP $procmux$321_CMP $auto$opt_reduce.cc:132:opt_mux$743 }
    New ctrl vector for $pmux cell $procmux$617: { $procmux$258_CMP $procmux$117_CMP $auto$opt_reduce.cc:132:opt_mux$749 $auto$opt_reduce.cc:132:opt_mux$747 $auto$opt_reduce.cc:132:opt_mux$745 $procmux$319_CMP $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$492: { $procmux$258_CMP $auto$opt_reduce.cc:132:opt_mux$755 $auto$opt_reduce.cc:132:opt_mux$753 $auto$opt_reduce.cc:132:opt_mux$751 }
    New ctrl vector for $pmux cell $procmux$442: { $procmux$258_CMP $procmux$203_CMP $procmux$117_CMP $auto$opt_reduce.cc:132:opt_mux$757 $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$567: { $procmux$258_CMP $auto$opt_reduce.cc:132:opt_mux$763 $auto$opt_reduce.cc:132:opt_mux$761 $auto$opt_reduce.cc:132:opt_mux$759 $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$592: { $auto$opt_reduce.cc:132:opt_mux$767 $auto$opt_reduce.cc:132:opt_mux$765 }
    New ctrl vector for $pmux cell $procmux$392: { $auto$opt_reduce.cc:132:opt_mux$771 $auto$opt_reduce.cc:132:opt_mux$769 }
    New ctrl vector for $pmux cell $procmux$467: { $procmux$203_CMP $procmux$117_CMP $procmux$327_CMP $procmux$326_CMP $auto$opt_reduce.cc:132:opt_mux$775 $auto$opt_reduce.cc:132:opt_mux$773 $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$517: { $procmux$339_CMP $auto$opt_reduce.cc:132:opt_mux$777 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$726: { $procmux$319_CMP $procmux$320_CMP $procmux$322_CMP $procmux$323_CMP $procmux$326_CMP $procmux$327_CMP $procmux$332_CMP $procmux$333_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$728: { $procmux$258_CMP $procmux$321_CMP $procmux$324_CMP $procmux$328_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$730: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$319_CMP $procmux$320_CMP $procmux$321_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$732: { $procmux$322_CMP $procmux$324_CMP $procmux$332_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$734: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$322_CMP $procmux$324_CMP $procmux$332_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$736: { $procmux$319_CMP $procmux$320_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$738: { $procmux$321_CMP $procmux$328_CMP $procmux$333_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$740: { $procmux$100_CMP $procmux$203_CMP $procmux$258_CMP $procmux$319_CMP $procmux$320_CMP $procmux$321_CMP $procmux$322_CMP $procmux$323_CMP $procmux$324_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$332_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$742: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$319_CMP $procmux$320_CMP $procmux$322_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$332_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$744: { $procmux$320_CMP $procmux$322_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$746: { $procmux$321_CMP $procmux$324_CMP $procmux$328_CMP $procmux$334_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$748: { $procmux$203_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$332_CMP $procmux$333_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$750: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$319_CMP $procmux$320_CMP $procmux$323_CMP $procmux$325_CMP $procmux$333_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$752: { $procmux$321_CMP $procmux$324_CMP $procmux$328_CMP $procmux$334_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$754: { $procmux$322_CMP $procmux$326_CMP $procmux$327_CMP $procmux$332_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$756: { $procmux$319_CMP $procmux$320_CMP $procmux$321_CMP $procmux$322_CMP $procmux$323_CMP $procmux$324_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$332_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$758: { $procmux$319_CMP $procmux$320_CMP $procmux$322_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$760: { $procmux$321_CMP $procmux$324_CMP $procmux$328_CMP $procmux$334_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$762: { $procmux$117_CMP $procmux$203_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$332_CMP $procmux$333_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$764: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$322_CMP $procmux$324_CMP $procmux$332_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$766: { $procmux$319_CMP $procmux$320_CMP $procmux$321_CMP $procmux$323_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$333_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$768: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$319_CMP $procmux$322_CMP $procmux$324_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$332_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$770: { $procmux$320_CMP $procmux$321_CMP $procmux$323_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$772: { $procmux$319_CMP $procmux$320_CMP $procmux$322_CMP $procmux$323_CMP $procmux$325_CMP $procmux$332_CMP $procmux$333_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$774: { $procmux$258_CMP $procmux$321_CMP $procmux$324_CMP $procmux$328_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$339_CMP $procmux$340_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$776: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP $procmux$319_CMP $procmux$320_CMP $procmux$321_CMP $procmux$322_CMP $procmux$323_CMP $procmux$324_CMP $procmux$325_CMP $procmux$326_CMP $procmux$327_CMP $procmux$328_CMP $procmux$332_CMP $procmux$333_CMP $procmux$334_CMP $procmux$335_CMP $procmux$336_CMP $procmux$337_CMP $procmux$338_CMP $procmux$340_CMP }
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
    Consolidated identical input bits for $mux cell $procmux$60:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0]
      New connections: $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [15:1] = { $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] $0$memwr$\dm$dmem.sv:11$49_EN[15:0]$54 [0] }
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
    New ctrl vector for $pmux cell $procmux$658: { $procmux$688_CMP $procmux$687_CMP $procmux$686_CMP $procmux$685_CMP $procmux$684_CMP $procmux$683_CMP $procmux$682_CMP $procmux$681_CMP $procmux$680_CMP $procmux$679_CMP $procmux$678_CMP $procmux$677_CMP $procmux$676_CMP $procmux$674_CMP $procmux$673_CMP $procmux$671_CMP $procmux$668_CMP $procmux$667_CMP $procmux$665_CMP $auto$opt_reduce.cc:132:opt_mux$783 $procmux$662_CMP $procmux$661_CMP $auto$opt_reduce.cc:132:opt_mux$781 $auto$opt_reduce.cc:132:opt_mux$779 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$778: { $procmux$659_CMP $procmux$689_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$780: { $procmux$660_CMP $procmux$663_CMP $procmux$666_CMP $procmux$669_CMP $procmux$672_CMP $procmux$675_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$782: { $procmux$664_CMP $procmux$670_CMP }
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
    Consolidated identical input bits for $mux cell $procmux$646:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\rega$ra.sv:11$28_EN[15:0]$30
      New ports: A=1'0, B=1'1, Y=$0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0]
      New connections: $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [15:1] = { $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] $0$memwr$\rega$ra.sv:11$28_EN[15:0]$30 [0] }
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 45 changes.

12.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
<suppressed ~39 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 13 cells.

12.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 0 unused cells and 325 unused wires.
<suppressed ~2 debug messages>

12.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.6.9. Rerunning OPT passes. (Maybe there is more to do..)

12.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

12.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
    New ctrl vector for $pmux cell $procmux$342: { $procmux$325_CMP $auto$opt_reduce.cc:132:opt_mux$729 $auto$opt_reduce.cc:132:opt_mux$727 $auto$opt_reduce.cc:132:opt_mux$785 }
    New ctrl vector for $pmux cell $procmux$442: { $auto$opt_reduce.cc:132:opt_mux$757 $auto$opt_reduce.cc:132:opt_mux$787 }
    New ctrl vector for $pmux cell $procmux$467: { $procmux$327_CMP $procmux$326_CMP $auto$opt_reduce.cc:132:opt_mux$729 $auto$opt_reduce.cc:132:opt_mux$773 $auto$opt_reduce.cc:132:opt_mux$789 }
    New ctrl vector for $pmux cell $procmux$617: { $procmux$258_CMP $auto$opt_reduce.cc:132:opt_mux$749 $auto$opt_reduce.cc:132:opt_mux$747 $auto$opt_reduce.cc:132:opt_mux$745 $procmux$319_CMP $auto$opt_reduce.cc:132:opt_mux$791 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$784: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$786: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP $procmux$258_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$788: { $procmux$100_CMP $procmux$117_CMP $procmux$203_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$790: { $procmux$100_CMP $procmux$117_CMP }
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 8 changes.

12.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 1 cells.

12.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

12.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

12.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.6.16. Rerunning OPT passes. (Maybe there is more to do..)

12.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

12.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 0 changes.

12.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

12.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.6.23. Finished OPT passes. (There is nothing left to do.)

12.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 32) from port Y of cell alu.$and$alu.sv:20$11 ($and).
Removed top 15 bits (of 32) from port B of cell alu.$and$alu.sv:20$11 ($and).
Removed top 31 bits (of 32) from port A of cell alu.$shl$alu.sv:19$7 ($shl).
Removed top 15 bits (of 32) from port Y of cell alu.$or$alu.sv:19$8 ($or).
Removed top 15 bits (of 32) from port B of cell alu.$or$alu.sv:19$8 ($or).
Removed top 15 bits (of 32) from port Y of cell alu.$not$alu.sv:20$10 ($not).
Removed top 15 bits (of 32) from port A of cell alu.$not$alu.sv:20$10 ($not).
Removed top 1 bits (of 17) from port Y of cell alu.$and$alu.sv:22$13 ($and).
Removed top 1 bits (of 17) from port Y of cell alu.$or$alu.sv:23$14 ($or).
Removed top 1 bits (of 17) from port Y of cell alu.$xor$alu.sv:25$17 ($xor).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$708_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$709_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$710_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$711_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$712_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$713_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$714_CMP0 ($eq).
Removed top 15 bits (of 32) from port Y of cell alu.$shl$alu.sv:19$7 ($shl).
Removed top 15 bits (of 32) from wire alu.$and$alu.sv:20$11_Y.
Removed top 15 bits (of 32) from wire alu.$not$alu.sv:20$10_Y.
Removed top 15 bits (of 32) from wire alu.$or$alu.sv:19$8_Y.
Removed top 15 bits (of 32) from wire alu.$shl$alu.sv:19$7_Y.
Removed top 2 bits (of 5) from port B of cell dec.$procmux$117_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell dec.$procmux$148 ($mux).
Removed top 3 bits (of 5) from port B of cell dec.$procmux$203_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell dec.$procmux$258_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell dec.$procmux$324_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell dec.$procmux$325_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell dec.$procmux$326_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell dec.$procmux$327_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell dec.$procmux$328_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell dec.$procmux$332_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell dec.$procmux$333_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell dec.$procmux$334_CMP0 ($eq).
Removed top 9 bits (of 12) from port B of cell dec.$procmux$335_CMP0 ($eq).
Removed top 9 bits (of 12) from port B of cell dec.$procmux$336_CMP0 ($eq).
Removed top 9 bits (of 12) from port B of cell dec.$procmux$337_CMP0 ($eq).
Removed top 9 bits (of 12) from port B of cell dec.$procmux$338_CMP0 ($eq).
Removed top 12 bits (of 13) from port B of cell dec.$procmux$339_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell dec.$procmux$644_CMP0 ($eq).
Removed top 1 bits (of 2) from wire dec.$2\liop[1:0].
Removed cell dmem.$procmux$62 ($mux).
Removed cell dmem.$procmux$64 ($mux).
Removed top 15 bits (of 16) from FF cell dmem.$procdff$718 ($dff).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$659_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$660_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$661_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$662_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$663_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$664_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$665_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$666_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$667_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$668_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$669_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$670_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$671_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$672_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell imem.$procmux$673_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$674_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$675_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$676_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$677_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$678_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$679_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$680_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell imem.$procmux$681_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell imem.$procmux$682_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell imem.$procmux$683_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell imem.$procmux$684_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell imem.$procmux$685_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell imem.$procmux$686_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell imem.$procmux$687_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell imem.$procmux$688_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell imx.$procmux$69_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell pc.$add$pc.sv:12$27 ($add).
Removed top 26 bits (of 32) from port Y of cell pc.$add$pc.sv:12$27 ($add).
Removed top 26 bits (of 32) from wire pc.$add$pc.sv:12$27_Y.
Removed cell ra.$procmux$648 ($mux).
Removed cell ra.$procmux$650 ($mux).
Removed top 15 bits (of 16) from FF cell ra.$procdff$719 ($dff).

12.8. Executing PEEPOPT pass (run peephole optimizers).

12.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 0 unused cells and 10 unused wires.
<suppressed ~5 debug messages>

12.10. Executing TECHMAP pass (map to technology primitives).

12.10.1. Executing Verilog-2005 frontend: C:\iverilog\bin\share\cmp2lut.v
Parsing Verilog input from `C:\iverilog\bin\share\cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

12.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~988 debug messages>

12.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$alu.sv:14$2 ($add).
  creating $macc model for $mul$alu.sv:26$18 ($mul).
  creating $macc model for $sub$alu.sv:15$3 ($sub).
  creating $alu model for $macc $sub$alu.sv:15$3.
  creating $alu model for $macc $add$alu.sv:14$2.
  creating $macc cell for $mul$alu.sv:26$18: $auto$alumacc.cc:354:replace_macc$798
  creating $alu cell for $add$alu.sv:14$2: $auto$alumacc.cc:474:replace_alu$799
  creating $alu cell for $sub$alu.sv:15$3: $auto$alumacc.cc:474:replace_alu$802
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module dec:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dmem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pc:
  creating $macc model for $add$pc.sv:12$27 ($add).
  creating $alu model for $macc $add$pc.sv:12$27.
  creating $alu cell for $add$pc.sv:12$27: $auto$alumacc.cc:474:replace_alu$805
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ra:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sel:
  created 0 $alu and 0 $macc cells.

12.12. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$alu.sv:16$4 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$713_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$alu.sv:17$5 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$712_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$alu.sv:19$7 ($shl):
    Found 2 activation_patterns using ctrl signal { $procmux$710_CMP $procmux$709_CMP }.
    No candidates found.
  Analyzing resource sharing options for $shl$alu.sv:18$6 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$711_CMP.
    No candidates found.

12.13. Executing OPT pass (performing simple optimizations).

12.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

12.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 0 changes.

12.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.13.9. Finished OPT passes. (There is nothing left to do.)

12.14. Executing FSM pass (extract and optimize FSM).

12.14.1. Executing FSM_DETECT pass (finding FSMs in design).

12.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

12.15. Executing OPT pass (performing simple optimizations).

12.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.15.5. Finished fast OPT passes.

12.16. Executing MEMORY pass.

12.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\dm$dmem.sv:11$55' in module `\dmem': merged $dff to cell.
Checking cell `$memrd$\dm$dmem.sv:9$50' in module `\dmem': no (compatible) $dff found.
Checking cell `$memwr$\rega$ra.sv:11$35' in module `\ra': merged $dff to cell.
Checking cell `$memrd$\rega$ra.sv:12$33' in module `\ra': no (compatible) $dff found.
Checking cell `$memrd$\rega$ra.sv:13$34' in module `\ra': no (compatible) $dff found.

12.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 6 unused cells and 6 unused wires.
<suppressed ~8 debug messages>

12.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

12.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\dm' in module `\dmem':
  $memwr$\dm$dmem.sv:11$55 ($memwr)
  $memrd$\dm$dmem.sv:9$50 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\rega' in module `\ra':
  $memwr$\rega$ra.sv:11$35 ($memwr)
  $memrd$\rega$ra.sv:12$33 ($memrd)
  $memrd$\rega$ra.sv:13$34 ($memrd)

12.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.18. Executing OPT pass (performing simple optimizations).

12.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~23 debug messages>
Optimizing module dec.
<suppressed ~21 debug messages>
Optimizing module dmem.
<suppressed ~1 debug messages>
Optimizing module imem.
<suppressed ~1 debug messages>
Optimizing module imx.
<suppressed ~1 debug messages>
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
<suppressed ~1 debug messages>
Optimizing module sel.

12.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 9 unused cells and 20 unused wires.
<suppressed ~15 debug messages>

12.18.5. Finished fast OPT passes.

12.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \dm in module \dmem:
  created 256 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 255 $mux cells.
  write interface: 256 write mux blocks.
Mapping memory cell \rega in module \ra:
  created 4 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 6 $mux cells.
  write interface: 4 write mux blocks.

12.20. Executing OPT pass (performing simple optimizations).

12.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
<suppressed ~16 debug messages>
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
<suppressed ~4 debug messages>
Optimizing module sel.

12.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~277 debug messages>

12.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
    Consolidated identical input bits for $mux cell $procmux$131:
      Old ports: A=4'1111, B=4'0000, Y=$3\op[3:0]
      New ports: A=1'1, B=1'0, Y=$3\op[3:0] [0]
      New connections: $3\op[3:0] [3:1] = { $3\op[3:0] [0] $3\op[3:0] [0] $3\op[3:0] [0] }
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 1 changes.

12.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 0 unused cells and 534 unused wires.
<suppressed ~2 debug messages>

12.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
<suppressed ~1 debug messages>
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.20.9. Rerunning OPT passes. (Maybe there is more to do..)

12.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~277 debug messages>

12.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \dec.
  Optimizing cells in module \dmem.
  Optimizing cells in module \imem.
  Optimizing cells in module \imx.
  Optimizing cells in module \pc.
  Optimizing cells in module \pu.
  Optimizing cells in module \ra.
  Optimizing cells in module \sel.
Performed a total of 0 changes.

12.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

12.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..

12.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module dec.
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.20.16. Finished OPT passes. (There is nothing left to do.)

12.21. Executing TECHMAP pass (map to technology primitives).

12.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

12.21.2. Continuing TECHMAP pass.
Using template $paramod$constmap:f5af5d1f7f6c402911d7646f07dbbeefd38732b4$paramod$f48ba873902dcdfe3637d9091f632f9cb0398fa7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:f5af5d1f7f6c402911d7646f07dbbeefd38732b4$paramod$e13d0ae4badf7f1c2030a1e353a7f1c4020597bb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:f5af5d1f7f6c402911d7646f07dbbeefd38732b4$paramod$99af9b02db50d889baaae35925beafcc67565d08\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:5b5d046e9be1b40f462718ce48335fe9a89e71f2$paramod$2664dc432d1aeb7f39f9b588244dca6a5715c6fb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using template $paramod$constmap:472aa2d167d8cc6c6b32dd5638d8f31467297c4f$paramod$559852cfed68b3122d9c7ca5b33dff7640657fba\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \a * \b (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=17\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=17 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=23 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
No more expansions possible.
<suppressed ~3617 debug messages>

12.22. Executing OPT pass (performing simple optimizations).

12.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~903 debug messages>
Optimizing module dec.
<suppressed ~164 debug messages>
Optimizing module dmem.
Optimizing module imem.
<suppressed ~718 debug messages>
Optimizing module imx.
<suppressed ~2 debug messages>
Optimizing module pc.
<suppressed ~30 debug messages>
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~687 debug messages>
Finding identical cells in module `\dec'.
<suppressed ~552 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
<suppressed ~597 debug messages>
Finding identical cells in module `\imx'.
<suppressed ~30 debug messages>
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 622 cells.

12.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 116 unused cells and 922 unused wires.
<suppressed ~121 debug messages>

12.22.5. Finished fast OPT passes.

12.23. Executing ABC pass (technology mapping using ABC).

12.23.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1947 gates and 1986 wires to a netlist network with 36 inputs and 18 outputs.

12.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      117
ABC RESULTS:            ANDNOT cells:       91
ABC RESULTS:              AOI3 cells:      112
ABC RESULTS:              AOI4 cells:       33
ABC RESULTS:               MUX cells:      134
ABC RESULTS:              NAND cells:       60
ABC RESULTS:               NOR cells:      245
ABC RESULTS:               NOT cells:       83
ABC RESULTS:              OAI3 cells:      116
ABC RESULTS:              OAI4 cells:       16
ABC RESULTS:                OR cells:       30
ABC RESULTS:             ORNOT cells:      261
ABC RESULTS:              XNOR cells:      259
ABC RESULTS:               XOR cells:       67
ABC RESULTS:        internal signals:     1932
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       18
Removing temp directory.

12.23.2. Extracting gate netlist of module `\dec' to `<abc-temp-dir>/input.blif'..
Extracted 363 gates and 384 wires to a netlist network with 19 inputs and 27 outputs.

12.23.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              AOI4 cells:        7
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:       20
ABC RESULTS:               NOR cells:       49
ABC RESULTS:               NOT cells:       19
ABC RESULTS:              OAI3 cells:       16
ABC RESULTS:              OAI4 cells:        5
ABC RESULTS:                OR cells:       24
ABC RESULTS:             ORNOT cells:      102
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:      338
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

12.23.3. Extracting gate netlist of module `\dmem' to `<abc-temp-dir>/input.blif'..
Extracted 8744 gates and 12865 wires to a netlist network with 4121 inputs and 4112 outputs.

12.23.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               MUX cells:     8176
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:      274
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:      258
ABC RESULTS:        internal signals:     4632
ABC RESULTS:           input signals:     4121
ABC RESULTS:          output signals:     4112
Removing temp directory.

12.23.4. Extracting gate netlist of module `\imem' to `<abc-temp-dir>/input.blif'..
Extracted 202 gates and 210 wires to a netlist network with 6 inputs and 16 outputs.

12.23.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:              AOI4 cells:       10
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       37
ABC RESULTS:             ORNOT cells:       31
ABC RESULTS:        internal signals:      188
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:       16
Removing temp directory.

12.23.5. Extracting gate netlist of module `\imx' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 125 wires to a netlist network with 26 inputs and 16 outputs.

12.23.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              AOI4 cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:       16
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:       17
ABC RESULTS:        internal signals:       83
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       16
Removing temp directory.

12.23.6. Extracting gate netlist of module `\pc' to `<abc-temp-dir>/input.blif'..
Extracted 23 gates and 38 wires to a netlist network with 14 inputs and 6 outputs.

12.23.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.6.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       12
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

12.23.7. Extracting gate netlist of module `\pu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.23.8. Extracting gate netlist of module `\ra' to `<abc-temp-dir>/input.blif'..
Extracted 170 gates and 257 wires to a netlist network with 87 inputs and 96 outputs.

12.23.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.8.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      160
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       74
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       96
Removing temp directory.

12.23.9. Extracting gate netlist of module `\sel' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

12.23.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.23.9.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

12.24. Executing OPT pass (performing simple optimizations).

12.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~53 debug messages>
Optimizing module dec.
<suppressed ~3 debug messages>
Optimizing module dmem.
Optimizing module imem.
Optimizing module imx.
Optimizing module pc.
<suppressed ~12 debug messages>
Optimizing module pu.
Optimizing module ra.
Optimizing module sel.

12.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\dec'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\imx'.
Finding identical cells in module `\pc'.
Finding identical cells in module `\pu'.
Finding identical cells in module `\ra'.
Finding identical cells in module `\sel'.
Removed a total of 0 cells.

12.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \dec..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \imx..
Finding unused cells or wires in module \pc..
Finding unused cells or wires in module \pu..
Finding unused cells or wires in module \ra..
Finding unused cells or wires in module \sel..
Removed 2 unused cells and 6331 unused wires.
<suppressed ~11 debug messages>

12.24.5. Finished fast OPT passes.

12.25. Executing HIERARCHY pass (managing design hierarchy).

12.25.1. Analyzing design hierarchy..
Top module:  \pu
Used module:     \alu
Used module:     \sel
Used module:     \dec
Used module:     \dmem
Used module:     \imem
Used module:     \imx
Used module:     \pc
Used module:     \ra

12.25.2. Analyzing design hierarchy..
Top module:  \pu
Used module:     \alu
Used module:     \sel
Used module:     \dec
Used module:     \dmem
Used module:     \imem
Used module:     \imx
Used module:     \pc
Used module:     \ra
Removed 0 unused modules.

12.26. Printing statistics.

=== alu ===

   Number of wires:               1618
   Number of wire bits:           1682
   Number of public wires:          11
   Number of public wire bits:      75
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1627
     $_ANDNOT_                      91
     $_AND_                        117
     $_AOI3_                       112
     $_AOI4_                        33
     $_DFF_PP0_                      3
     $_MUX_                        134
     $_NAND_                        60
     $_NOR_                        245
     $_NOT_                         83
     $_OAI3_                       116
     $_OAI4_                        16
     $_ORNOT_                      261
     $_OR_                          30
     $_XNOR_                       259
     $_XOR_                         67

=== dec ===

   Number of wires:                287
   Number of wire bits:            316
   Number of public wires:          17
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                297
     $_ANDNOT_                      28
     $_AND_                          3
     $_AOI3_                         5
     $_AOI4_                         7
     $_MUX_                         16
     $_NAND_                        20
     $_NOR_                         49
     $_NOT_                         19
     $_OAI3_                        16
     $_OAI4_                         5
     $_ORNOT_                      102
     $_OR_                          24
     $_XNOR_                         1
     $_XOR_                          2

=== dmem ===

   Number of wires:               8982
   Number of wire bits:          12859
   Number of public wires:         261
   Number of public wire bits:    4138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              12833
     $_ANDNOT_                       2
     $_AND_                          2
     $_DFF_P_                     4096
     $_MUX_                       8176
     $_NAND_                        22
     $_NOR_                        274
     $_NOT_                          1
     $_ORNOT_                      258
     $_OR_                           2

=== imem ===

   Number of wires:                132
   Number of wire bits:            152
   Number of public wires:           2
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     $_ANDNOT_                      10
     $_AOI3_                         9
     $_AOI4_                        10
     $_NAND_                         3
     $_NOR_                         36
     $_NOT_                          3
     $_OAI3_                         5
     $_OAI4_                         2
     $_ORNOT_                       31
     $_OR_                          37

=== imx ===

   Number of wires:                 56
   Number of wire bits:             94
   Number of public wires:           4
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 68
     $_ANDNOT_                       1
     $_AND_                          1
     $_AOI4_                        16
     $_MUX_                         16
     $_NAND_                        16
     $_ORNOT_                       17
     $_OR_                           1

=== pc ===

   Number of wires:                 24
   Number of wire bits:             39
   Number of public wires:           6
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_DFF_PP0_                      6
     $_MUX_                         12
     $_NAND_                         2
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         4
     $_XOR_                          1

=== pu ===

   Number of wires:                 27
   Number of wire bits:            166
   Number of public wires:          27
   Number of public wire bits:     166
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     alu                             1
     dec                             1
     dmem                            1
     imem                            1
     imx                             1
     pc                              1
     ra                              1
     sel                             2

=== ra ===

   Number of wires:                150
   Number of wire bits:            258
   Number of public wires:          13
   Number of public wire bits:     121
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                233
     $_DFF_P_                       64
     $_MUX_                        160
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           1

=== sel ===

   Number of wires:                  4
   Number of wire bits:             49
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_MUX_                         16

=== design hierarchy ===

   pu                                1
     alu                             1
     dec                             1
     dmem                            1
     imem                            1
     imx                             1
     pc                              1
     ra                              1
     sel                             2

   Number of wires:              11284
   Number of wire bits:          15664
   Number of public wires:         349
   Number of public wire bits:    4724
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              15265
     $_ANDNOT_                     132
     $_AND_                        123
     $_AOI3_                       126
     $_AOI4_                        66
     $_DFF_PP0_                      9
     $_DFF_P_                     4160
     $_MUX_                       8546
     $_NAND_                       124
     $_NOR_                        608
     $_NOT_                        108
     $_OAI3_                       137
     $_OAI4_                        23
     $_ORNOT_                      673
     $_OR_                          96
     $_XNOR_                       264
     $_XOR_                         70

12.27. Executing CHECK pass (checking for obvious problems).
checking module alu..
checking module dec..
checking module dmem..
checking module imem..
checking module imx..
checking module pc..
checking module pu..
checking module ra..
checking module sel..
found and reported 0 problems.

13. Executing Verilog backend.
Dumping module `\alu'.
Dumping module `\dec'.
Dumping module `\dmem'.
Dumping module `\imem'.
Dumping module `\imx'.
Dumping module `\pc'.
Dumping module `\pu'.
Dumping module `\ra'.
Dumping module `\sel'.

14. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\alu':
  mapped 3 $_DFF_PP0_ cells to \DFFSR cells.
Mapping DFF cells in module `\dec':
Mapping DFF cells in module `\dmem':
  mapped 4096 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\imem':
Mapping DFF cells in module `\imx':
Mapping DFF cells in module `\pc':
  mapped 6 $_DFF_PP0_ cells to \DFFSR cells.
Mapping DFF cells in module `\pu':
Mapping DFF cells in module `\ra':
  mapped 64 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\sel':

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1627 gates and 1664 wires to a netlist network with 37 inputs and 21 outputs.

15.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       46
ABC RESULTS:           AOI21X1 cells:      125
ABC RESULTS:           AOI22X1 cells:       41
ABC RESULTS:             INVX1 cells:       80
ABC RESULTS:            MUX2X1 cells:       31
ABC RESULTS:           NAND2X1 cells:      275
ABC RESULTS:           NAND3X1 cells:       50
ABC RESULTS:            NOR2X1 cells:      207
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:      286
ABC RESULTS:           OAI22X1 cells:       23
ABC RESULTS:             OR2X1 cells:       43
ABC RESULTS:           XNOR2X1 cells:      158
ABC RESULTS:            XOR2X1 cells:      103
ABC RESULTS:        internal signals:     1606
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       21
Removing temp directory.

15.2. Extracting gate netlist of module `\dec' to `<abc-temp-dir>/input.blif'..
Extracted 297 gates and 316 wires to a netlist network with 19 inputs and 27 outputs.

15.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       17
ABC RESULTS:           AOI21X1 cells:       11
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:            MUX2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       21
ABC RESULTS:           NAND3X1 cells:       19
ABC RESULTS:            NOR2X1 cells:       36
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       24
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:             OR2X1 cells:        8
ABC RESULTS:        internal signals:      270
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

15.3. Extracting gate netlist of module `\dmem' to `<abc-temp-dir>/input.blif'..
Extracted 8737 gates and 12858 wires to a netlist network with 4121 inputs and 4112 outputs.

15.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:       59
ABC RESULTS:           AOI21X1 cells:      952
ABC RESULTS:           AOI22X1 cells:     1955
ABC RESULTS:             INVX1 cells:      174
ABC RESULTS:           NAND2X1 cells:     4433
ABC RESULTS:           NAND3X1 cells:      267
ABC RESULTS:            NOR2X1 cells:      253
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           OAI21X1 cells:     4396
ABC RESULTS:           OAI22X1 cells:       37
ABC RESULTS:             OR2X1 cells:      257
ABC RESULTS:        internal signals:     4625
ABC RESULTS:           input signals:     4121
ABC RESULTS:          output signals:     4112
Removing temp directory.

15.4. Extracting gate netlist of module `\imem' to `<abc-temp-dir>/input.blif'..
Extracted 146 gates and 152 wires to a netlist network with 6 inputs and 16 outputs.

15.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        6
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        6
ABC RESULTS:           NAND2X1 cells:       14
ABC RESULTS:           NAND3X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       35
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:           OAI22X1 cells:        3
ABC RESULTS:             OR2X1 cells:        8
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:      130
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:       16
Removing temp directory.

15.5. Extracting gate netlist of module `\imx' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 94 wires to a netlist network with 26 inputs and 16 outputs.

15.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.5.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:           NAND2X1 cells:       15
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:       52
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       16
Removing temp directory.

15.6. Extracting gate netlist of module `\pc' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 44 wires to a netlist network with 15 inputs and 12 outputs.

15.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.6.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:           OAI21X1 cells:        2
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:       12
Removing temp directory.

15.7. Extracting gate netlist of module `\pu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

15.8. Extracting gate netlist of module `\ra' to `<abc-temp-dir>/input.blif'..
Extracted 169 gates and 256 wires to a netlist network with 87 inputs and 96 outputs.

15.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.8.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       66
ABC RESULTS:            MUX2X1 cells:      144
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:             OR2X1 cells:        1
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       96
Removing temp directory.

15.9. Extracting gate netlist of module `\sel' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

15.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "C:\Users\west\lec-compsys\PU\PU-FIN/../osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 5000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 5000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

15.9.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:           OAI21X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

16. Printing statistics.

=== alu ===

   Number of wires:               3131
   Number of wire bits:           3195
   Number of public wires:          11
   Number of public wire bits:      75
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1476
     AND2X1                         46
     AOI21X1                       125
     AOI22X1                        41
     DFFSR                           3
     INVX1                          80
     MUX2X1                         31
     NAND2X1                       275
     NAND3X1                        50
     NOR2X1                        207
     NOR3X1                          5
     OAI21X1                       286
     OAI22X1                        23
     OR2X1                          43
     XNOR2X1                       158
     XOR2X1                        103

   Chip area for module '\alu': 47586.000000

=== dec ===

   Number of wires:                481
   Number of wire bits:            510
   Number of public wires:          17
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                175
     AND2X1                         17
     AOI21X1                        11
     AOI22X1                         5
     INVX1                          22
     MUX2X1                          3
     NAND2X1                        21
     NAND3X1                        19
     NOR2X1                         36
     NOR3X1                          5
     OAI21X1                        24
     OAI22X1                         4
     OR2X1                           8

   Chip area for module '\dec': 4932.000000

=== dmem ===

   Number of wires:              25905
   Number of wire bits:          29782
   Number of public wires:         261
   Number of public wire bits:    4138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16898
     AND2X1                         59
     AOI21X1                       952
     AOI22X1                      1955
     DFFPOSX1                     4096
     INVX1                         174
     NAND2X1                      4433
     NAND3X1                       267
     NOR2X1                        253
     NOR3X1                         19
     OAI21X1                      4396
     OAI22X1                        37
     OR2X1                         257

   Chip area for module '\dmem': 740656.000000

=== imem ===

   Number of wires:                257
   Number of wire bits:            277
   Number of public wires:           2
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                119
     AND2X1                          6
     AOI21X1                         9
     AOI22X1                         1
     INVX1                           6
     NAND2X1                        14
     NAND3X1                        20
     NOR2X1                         35
     NOR3X1                          1
     OAI21X1                        15
     OAI22X1                         3
     OR2X1                           8
     XNOR2X1                         1

   Chip area for module '\imem': 3353.000000

=== imx ===

   Number of wires:                133
   Number of wire bits:            171
   Number of public wires:           4
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     INVX1                          11
     MUX2X1                          1
     NAND2X1                        15
     NAND3X1                        15
     OAI21X1                         8
     XNOR2X1                         1

   Chip area for module '\imx': 1364.000000

=== pc ===

   Number of wires:                 80
   Number of wire bits:             95
   Number of public wires:           6
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     AOI21X1                         6
     AOI22X1                         2
     DFFSR                           6
     INVX1                          12
     MUX2X1                          2
     NAND2X1                         4
     NAND3X1                         1
     NOR2X1                          6
     OAI21X1                         2

   Chip area for module '\pc': 1938.000000

=== pu ===

   Number of wires:                 27
   Number of wire bits:            166
   Number of public wires:          27
   Number of public wire bits:     166
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     alu                             1
     dec                             1
     dmem                            1
     imem                            1
     imx                             1
     pc                              1
     ra                              1
     sel                             2

   Area for cell type \alu is unknown!
   Area for cell type \imem is unknown!
   Area for cell type \pc is unknown!
   Area for cell type \ra is unknown!
   Area for cell type \dec is unknown!
   Area for cell type \imx is unknown!
   Area for cell type \dmem is unknown!
   Area for cell type \sel is unknown!

=== ra ===

   Number of wires:                484
   Number of wire bits:            592
   Number of public wires:          13
   Number of public wire bits:     121
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                311
     DFFPOSX1                       64
     INVX1                          66
     MUX2X1                        144
     NAND2X1                         1
     NAND3X1                         3
     OAI21X1                        32
     OR2X1                           1

   Chip area for module '\ra': 15012.000000

=== sel ===

   Number of wires:                 85
   Number of wire bits:            130
   Number of public wires:           4
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     INVX1                          16
     NAND2X1                        16
     OAI21X1                        16

   Chip area for module '\sel': 1008.000000

=== design hierarchy ===

   pu                                1
     alu                             1
     dec                             1
     dmem                            1
     imem                            1
     imx                             1
     pc                              1
     ra                              1
     sel                             2

   Number of wires:              30668
   Number of wire bits:          35048
   Number of public wires:         349
   Number of public wire bits:    4724
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              19167
     AND2X1                        128
     AOI21X1                      1103
     AOI22X1                      2004
     DFFPOSX1                     4160
     DFFSR                           9
     INVX1                         403
     MUX2X1                        181
     NAND2X1                      4795
     NAND3X1                       375
     NOR2X1                        537
     NOR3X1                         30
     OAI21X1                      4795
     OAI22X1                        67
     OR2X1                         317
     XNOR2X1                       160
     XOR2X1                        103

   Chip area for top module '\pu': 816857.000000

17. Executing Verilog backend.
Dumping module `\alu'.
Dumping module `\dec'.
Dumping module `\dmem'.
Dumping module `\imem'.
Dumping module `\imx'.
Dumping module `\pc'.
Dumping module `\pu'.
Dumping module `\ra'.
Dumping module `\sel'.

18. Generating Graphviz representation of design.
Writing dot description to `show.dot'.
Dumping module pu to page 1.
Exec: gvedit "show.dot"

Warnings: 12 unique messages, 36 total
End of script. Logfile hash: b7d013f842
Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os)
Time spent: 2% 21x opt_expr (0 sec), 2% 20x read_verilog (0 sec), ...
