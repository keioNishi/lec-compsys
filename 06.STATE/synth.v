/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* top =  1  *)
(* src = "state-oh.v:1" *)
module state(a, b, floor, clk, rst);
  (* src = "state-oh.v:7" *)
  (* unused_bits = "0" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "state-oh.v:2" *)
  input a;
  (* src = "state-oh.v:2" *)
  input b;
  (* src = "state-oh.v:4" *)
  input clk;
  (* src = "state-oh.v:3" *)
  output [1:0] floor;
  (* src = "state-oh.v:4" *)
  input rst;
  (* src = "state-oh.v:5" *)
  (* unused_bits = "0" *)
  wire [2:0] s;
  assign _01_ = a & ~(b);
  assign floor[1] = s[1] | s[2];
  assign _02_ = floor[1] | ~(_01_);
  assign _03_ = b & ~(a);
  assign _04_ = ~(a ^ b);
  assign _05_ = ~((_03_ & s[2]) | (s[1] & _04_));
  assign _00_[1] = ~((_05_ & _02_) | rst);
  assign _06_ = a | ~(b);
  assign _07_ = ~((_06_ & s[2]) | (s[1] & _01_));
  assign _00_[2] = ~(_07_ | rst);
  assign floor[0] = s[2] | ~(s[1]);
  reg \s_reg[1] ;
  (* src = "state-oh.v:7" *)
  always @(posedge clk)
      \s_reg[1]  <= _00_[1];
  assign s[1] = \s_reg[1] ;
  reg \s_reg[2] ;
  (* src = "state-oh.v:7" *)
  always @(posedge clk)
      \s_reg[2]  <= _00_[2];
  assign s[2] = \s_reg[2] ;
endmodule
